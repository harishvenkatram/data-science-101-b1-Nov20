{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled23.ipynb",
      "provenance": [],
      "authorship_tag": "ABX9TyP99NpELBZPnSl/YJ8OV2yt",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/harishvenkatram/data-science-101-b1-Nov20/blob/main/Day%203-11th%20Nov'20%20Assisgnment%20Solution\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "TJNfYp7NzRHS",
        "outputId": "c150479a-2ff7-416e-d9ce-420e677ab547",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "#Questions 1\n",
        "#Solution\n",
        "import numpy as np\n",
        "np.arange(2,51,3,int)"
      ],
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([ 2,  5,  8, 11, 14, 17, 20, 23, 26, 29, 32, 35, 38, 41, 44, 47, 50])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "SgDK9o6c3JiF",
        "outputId": "221211b4-cdf7-403a-a225-1241bb0637eb",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "#Question 2\n",
        "#Solution\n",
        "import numpy as np\n",
        "list1=[]\n",
        "list2=[]\n",
        "print(\"Enter 5 elements in first list\")\n",
        "for i in range(5):\n",
        "  a=int(input())\n",
        "  list1.append(a)\n",
        "  i+=1\n",
        "arr1=np.array(list1)\n",
        "print(\"Enter 5 elements in second list\")\n",
        "for j in range(5):\n",
        "  b=int(input())\n",
        "  list2.append(b)\n",
        "  j+=1\n",
        "arr2=np.array(list2)\n",
        "arr=np.concatenate((arr1,arr2))\n",
        "print(\"Concatenated Array: \",arr)\n",
        "print(\"Sorted Arrays: \",np.sort(arr))"
      ],
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Enter 5 elements in first list\n",
            "23\n",
            "56\n",
            "12\n",
            "4\n",
            "53\n",
            "Enter 5 elements in second list\n",
            "9\n",
            "6\n",
            "56\n",
            "11\n",
            "18\n",
            "Concatenated Array:  [23 56 12  4 53  9  6 56 11 18]\n",
            "Sorted Arrays:  [ 4  6  9 11 12 18 23 53 56 56]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "yDrYoco2BUu5"
      },
      "source": [
        "#Question 3\n",
        "#Solution\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ou4OTCYvCQby",
        "outputId": "69011b58-8171-4a5c-8117-58569cc86368",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        "#Question 4\n",
        "#Solution\n",
        "import numpy as np\n",
        "arr = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9,10])\n",
        "print(arr.shape)\n",
        "twod= arr[np.newaxis, :]\n",
        "print(twod.shape)\n"
      ],
      "execution_count": 31,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "(10,)\n",
            "(1, 10)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "D9Eth_H9GAF5"
      },
      "source": [
        "#Question 5\n",
        "#Solution\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "xshCOj_RGE-m"
      },
      "source": [
        "#Question 6\n",
        "#Solution\n"
      ],
      "execution_count": null,
      "outputs": []
    }
  ]
}